@typeparam T where T : class
@code {
    [Parameter] public string Header { get; set; } = "";
    [Parameter] public RenderFragment<T>? ChildContent { get; set; }
    [Parameter] public IReadOnlyList<T> Models { get; set; } = [];
    [Parameter] public EventCallback AddCommand { get; set; }
    [Parameter] public T Selection { get; set; }
    [Parameter] public EventCallback<T> SelectionChanged { get; set; }

    private void Select(T model)
    {
        Selection = model;
        SelectionChanged.InvokeAsync(model);
    }
}

<div class="layout">
    <header>
        <span class="title">@Header</span>
        @if (AddCommand.HasDelegate)
        {
            <CommandButton @onclick="AddCommand">Add</CommandButton>
        }
    </header>

    <div class="list">
        @foreach (var model in Models)
        {
            <button class="@(model == Selection ? "item item--selected" : "item")" @onclick="() => Select(model)">
                @ChildContent?.Invoke(model)
            </button>
        }
    </div>
</div>