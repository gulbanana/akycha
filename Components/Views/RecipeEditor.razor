@using Microsoft.EntityFrameworkCore
@code {
    [Inject] public required NavigationManager Nav { get; set; }
    [CascadingParameter] public required IUnitOfWork UOW { get; set; }
    [Parameter] public required Recipe Model { get; set; }
    private List<Machine>? machines;
    private List<Part>? parts;

    protected override async Task OnParametersSetAsync()
    {
        machines = await UOW.Load(db => db.Machines.ToListAsync());
        parts = await UOW.Load(db => db.Parts.ToListAsync());
    }

    private void DeleteRecipe()
    {
        UOW.GetLoaded<Recipe>().Remove(Model);
        UOW.NotifyChanged();
    }

    private void AddIngredient()
    {
        Model.Items.Add(new() { Recipe = Model, Role = ItemRole.Ingredient });
        UOW.NotifyChanged();
    }

    private void AddProduct()
    {
        var role = Model.Items.Any(rp => rp.Role == ItemRole.Product) 
            ? ItemRole.Byproduct
            : ItemRole.Product;
        Model.Items.Add(new() { Recipe = Model, Role = role });
        UOW.NotifyChanged();
    }

    private void RemoveItem(Item item)
    {
        Model.Items.Remove(item);
        if (item.Role == ItemRole.Product && Model.Items.Where(bp => bp.Role == ItemRole.Byproduct).ToList() is [var first, ..])
        {
            first.Role = ItemRole.Product;
        }

        UOW.GetLoaded<Item>().Remove(item);
        UOW.NotifyChanged();
    }

    private void CreateAlternate()
    {
        var product = Model.Items.Where(i => i.Role == ItemRole.Product).First();
        if (product is null)
        {
            return;
        }

        var clone = new Recipe
        {
            Name = Model.Name + " (copy)",
            Machine = Model.Machine
        };
        clone.Items.Add(new Item
        {
            Recipe = clone,
            Role = product.Role,
            Part = product.Part
        });

        void go()
        {
            Nav.NavigateTo("Recipes/" + clone.Id);
            UOW.OnChanged -= go;
        }

        UOW.GetLoaded<Recipe>().Add(clone);
        UOW.OnChanged += go;
        UOW.NotifyChanged();        
    }
}

@if (machines is not null && parts is not null)
{
    <FieldColumn>
        <Block Label="Name">
            <TextField id="@context" @bind-Value="Model.Name" />
        </Block>

        <Block Label="Machine">
            <ComboField id="@context" T="Machine" @bind-Value="Model.Machine" Context="selection" Options="machines">
                <ImageBox Value="selection!.Icon" SideLength="32" />
                <span>@selection.Name</span>
            </ComboField>
        </Block>

        <Grid T="Item" Items="Model.Items.Where(i => i.Role == ItemRole.Ingredient)"
            Labels="@(["Ingredient", "Quantity"])" OnAdd="AddIngredient" OnRemove="RemoveItem">
            <ComboField T="Part" @bind-Value="context.Part" Context="selection" Options="parts">
                <ImageBox Value="selection!.Icon" SideLength="32" />
                <span>@selection.Name</span>
            </ComboField>
            <FloatField @bind-Value="context.QuantityPerMinute" />
        </Grid>

        <Grid T="Item" Items="Model.Items.Where(i => i.Role == ItemRole.Product || i.Role == ItemRole.Byproduct)"
            Labels="@(["Product", "Quantity"])" OnAdd="AddProduct" OnRemove="RemoveItem">
            <ComboField T="Part" @bind-Value="context.Part" Context="selection" Options="parts">
                <ImageBox Value="selection!.Icon" SideLength="32" />
                <span>@selection.Name</span>
            </ComboField>
            <FloatField @bind-Value="context.QuantityPerMinute" />
            @* <CheckField @bind-Value="context.IsByproduct" /> *@
        </Grid>

        <DeleteCommandBar Action="DeleteRecipe">
            <CommandButton Action="CreateAlternate">Create Alternate</CommandButton>
        </DeleteCommandBar>
    </FieldColumn>
}