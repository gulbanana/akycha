@using Microsoft.EntityFrameworkCore
@code {
    [CascadingParameter] public required IUnitOfWork UOW { get; set; }
    [Parameter] public required Facility Model { get; set; }
    private List<Recipe>? recipes;

    protected override async Task OnParametersSetAsync()
    {
        recipes = await UOW.Load(db => db.Recipes.ToListAsync());
    }

    private void DeleteFacility()
    {
        UOW.GetLoaded<Facility>().Remove(Model);
        UOW.NotifyChanged();
    }

    private void AddProcess()
    {
        Model.Processes.Add(new() { Facility = Model });
        UOW.NotifyChanged();
    }

    private void RemoveProcess(Process item)
    {
        Model.Processes.Remove(item);
        UOW.GetLoaded<Process>().Remove(item);
        UOW.NotifyChanged();
    }

    private IEnumerable<Input> CalculateOutputs()
    {
        foreach (var process in Model.Processes)
        {
            foreach (var item in process.Recipe?.Items ?? [])
            {
                if (item.Role != ItemRole.Ingredient)
                {
                    yield return new Input
                    {
                        From = Model,
                        To = Model,
                        Part = item.Part,
                        QuantityPerMinute = item.QuantityPerMinute * process.QuantityMachines
                    };
                }
            }
        }
        yield break;
    }
}

@if (recipes is not null)
{
    <div class="layout">
        <Block Label="Name">
            <TextField id="@context" @bind-Value="Model.Name" />
        </Block>

        <Grid T="Process" Items="Model.Processes" Labels="@(["Process", "Machines"])" OnAdd="AddProcess" OnRemove="RemoveProcess">
            <ComboField T="Recipe" @bind-Value="context.Recipe" Context="selection" Options="recipes">
                <ImageBox Value="selection!.GetIcon()" SideLength="32" />
                <span>@selection.Name</span>
            </ComboField>
            <IntField @bind-Value="context.QuantityMachines" />
        </Grid>

        <Grid T="Input" Items="CalculateOutputs()" Labels="@(["Output", "Available Quantity"])">
            <ReadonlyBox>
                <ImageBox Value="context.Part?.Icon" SideLength="32" />
                <span>@context.Part?.Name</span>
            </ReadonlyBox>
            <ReadonlyBox>@context.QuantityPerMinute</ReadonlyBox>
        </Grid>

        <CommandButton @onclick="DeleteFacility">Delete</CommandButton>
    </div>
}