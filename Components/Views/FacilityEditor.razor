@using Microsoft.EntityFrameworkCore
@code {
    [CascadingParameter] public required IUnitOfWork UOW { get; set; }
    [Parameter] public required Facility Model { get; set; }
    private List<Recipe>? recipes;

    protected override async Task OnParametersSetAsync()
    {
        recipes = await UOW.Load(db => db.Recipes.ToListAsync());
    }

    private void DeleteFacility()
    {
        UOW.GetLoaded<Facility>().Remove(Model);
        UOW.NotifyChanged();
    }

    private void AddProcess()
    {
        Model.Processes.Add(new() { Facility = Model });
        UOW.NotifyChanged();
    }

    private void RemoveProcess(Process item)
    {
        Model.Processes.Remove(item);
        UOW.GetLoaded<Process>().Remove(item);
        UOW.NotifyChanged();
    }
}

@if (recipes is not null)
{
    <div class="layout">
        <Block Label="Name">
            <TextField id="@context" @bind-Value="Model.Name" />
        </Block>

        <Grid T="Process" Items="Model.Processes" Labels="@(["Recipe", "Machines"])" OnAdd="AddProcess" OnRemove="RemoveProcess">
            <ComboField T="Recipe" @bind-Value="context.Recipe" Context="selection" Options="recipes">
                <ImageBox Value="selection!.GetIcon()" SideLength="32" />
                <span>@selection.Name</span>
            </ComboField>
            <IntField @bind-Value="context.QuantityMachines" />
        </Grid>

        <CommandButton @onclick="DeleteFacility">Delete</CommandButton>
    </div>
}