@using Microsoft.EntityFrameworkCore
@code {
    [CascadingParameter] public required IUnitOfWork UOW { get; set; }
    [Parameter] public required Facility Model { get; set; }
    private List<Recipe>? recipes;
    private List<Facility>? facilities;
    
    protected override async Task OnParametersSetAsync()
    {
        recipes = await UOW.Load(db => db.Recipes
            .Include(r => r.Items)
            .ThenInclude(i => i.Part)
            .ToListAsync());
            
        facilities = await UOW.Load(db => db.Facilities.ToListAsync());
    }

    private void DeleteFacility()
    {
        UOW.GetLoaded<Facility>().Remove(Model);
        UOW.NotifyChanged();
    }

    private void AddProcess()
    {
        Model.Processes.Add(new() { Facility = Model });
        UOW.NotifyChanged();
    }

    private void RemoveProcess(Process item)
    {
        Model.Processes.Remove(item);
        UOW.GetLoaded<Process>().Remove(item);
        UOW.NotifyChanged();
    }

    private void AddInput()
    {
        Model.Inputs.Add(new() { From = Model, To = null! });
        UOW.NotifyChanged();
    }

    private void RemoveInput(Input item)
    {
        Model.Inputs.Remove(item);
        UOW.GetLoaded<Input>().Remove(item);
        UOW.NotifyChanged();
    }

    private void AddOutput()
    {
        Model.Outputs.Add(new() { From = Model, To = null!  });
        UOW.NotifyChanged();
    }

    private void RemoveOutput(Input item)
    {
        Model.Outputs.Remove(item);
        UOW.GetLoaded<Input>().Remove(item);
        UOW.NotifyChanged();
    }
}

@if (recipes is not null)
{
    <div class="layout">
        <Block Label="Name">
            <TextField id="@context" @bind-Value="Model.Name" />
        </Block>

        <Block Label="Category">
            <TextField id="@context" @bind-Value="Model.Category" />
        </Block>

        <Grid T="Process" Items="Model.Processes" Labels="@(["Process", "Machines", "Shards"])" OnAdd="AddProcess" OnRemove="RemoveProcess">
            <ComboField T="Recipe" @bind-Value="context.Recipe" Context="selection" Options="recipes">
                <ImageBox Value="selection!.GetIcon()" SideLength="32" />
                <span>@selection.Name</span>
            </ComboField>
            <IntField @bind-Value="context.QuantityMachines" />
            <IntField @bind-Value="context.PowerShards" />
        </Grid>

        <Grid T="Input" Items="Model.Inputs" Labels="@(["Input", "Quantity (per minute)", "Source"])" OnAdd="AddInput" OnRemove="RemoveInput">            
            <ComboField T="Part" @bind-Value="context.Part" Context="selection"
                Options="@(context.From?.CalculateLocalParts() ?? [])">
                <ImageBox Value="selection!.Icon" SideLength="32" />
                <span>@selection.Name</span>
            </ComboField>
            <FloatField @bind-Value="context.QuantityPerMinute" />
            <ComboField T="Facility" @bind-Value="context.From" Context="selection" Options="facilities">
                @foreach (var icon in selection!.GetIcons())
                {
                    <ImageBox Value="icon" SideLength="32" />
                }
                <span>@selection.Name</span>
            </ComboField>
        </Grid>

        @{
            var missingInputs = Model.CalculateMissingInputs().ToList();
            if (missingInputs.Any())
            {
                <Grid T="Input" Items="missingInputs" Labels="@(["Missing", "Required (per minute)"])" Derived>
                    <ReadonlyBox>
                        <ImageBox Value="context.Part?.Icon" SideLength="32" />
                        <span>@context.Part?.Name</span>
                    </ReadonlyBox>
                    <ReadonlyBox>@context.QuantityPerMinute</ReadonlyBox>
                </Grid>
            }
        }

        <Grid T="Input" Items="Model.Outputs" Labels="@(["Output", "Quantity (per minute)", "Destination"])" OnAdd="AddOutput" OnRemove="RemoveOutput">
            <ComboField T="Part" @bind-Value="context.Part" Context="selection" Options="Model.CalculateLocalParts()">
                <ImageBox Value="selection!.Icon" SideLength="32" />
                <span>@selection.Name</span>
            </ComboField>
            <FloatField @bind-Value="context.QuantityPerMinute" />
            <ComboField T="Facility" @bind-Value="context.To" Context="selection" Options="facilities">
                @foreach (var icon in selection!.GetIcons())
                {
                    <ImageBox Value="icon" SideLength="32" />
                }
                <span>@selection.Name</span>
            </ComboField>
        </Grid>

        @{
            var excessOutputs = Model.CalculateExcessOutputs().ToList();
            if (excessOutputs.Any())
            {
                <Grid T="Input" Items="Model.CalculateExcessOutputs()" Labels="@(["Excess", "Available (per minute)"])"
                    Derived>
                    <ReadonlyBox>
                        <ImageBox Value="context.Part?.Icon" SideLength="32" />
                        <span>@context.Part?.Name</span>
                    </ReadonlyBox>
                    <ReadonlyBox>@context.QuantityPerMinute</ReadonlyBox>
                </Grid>
            }
        }

        <Block Label="Statistics" />
        <Grid Items="@(new object[1])" Labels="@(["Power Usage"])" Derived>
            <ReadonlyBox>@Model.CalculatePowerText()</ReadonlyBox>
        </Grid>

        <CommandButton @onclick="DeleteFacility">Delete</CommandButton>
    </div>
}