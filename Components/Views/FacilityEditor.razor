@using Microsoft.EntityFrameworkCore
@code {
    [CascadingParameter] public required IUnitOfWork UOW { get; set; }
    [Parameter] public required Facility Model { get; set; }
    private List<Recipe>? recipes;
    private List<Facility>? facilities;
    
    protected override async Task OnParametersSetAsync()
    {
        recipes = await UOW.Load(db => db.Recipes
            .Include(r => r.Items)
            .ThenInclude(i => i.Part)
            .ToListAsync());
            
        facilities = await UOW.Load(db => db.Facilities.ToListAsync());
    }

    private void DeleteFacility()
    {
        UOW.GetLoaded<Facility>().Remove(Model);
        UOW.NotifyChanged();
    }

    private void AddProcess()
    {
        Model.Processes.Add(new() { Facility = Model });
        UOW.NotifyChanged();
    }

    private void RemoveProcess(Process item)
    {
        Model.Processes.Remove(item);
        UOW.GetLoaded<Process>().Remove(item);
        UOW.NotifyChanged();
    }

    private void AddInput()
    {
        Model.Inputs.Add(new());
        UOW.NotifyChanged();
    }

    private void RemoveInput(Input item)
    {
        Model.Inputs.Remove(item);
        UOW.GetLoaded<Input>().Remove(item);
        UOW.NotifyChanged();
    }

    private void AddOutput()
    {
        Model.Outputs.Add(new());
        UOW.NotifyChanged();
    }

    private void RemoveOutput(Input item)
    {
        Model.Outputs.Remove(item);
        UOW.GetLoaded<Input>().Remove(item);
        UOW.NotifyChanged();
    }

    private async Task<List<Recipe>> LoadAlternates(Recipe? recipe)
    {
        if ((recipe?.Items ?? []).Where(i => i.Role == ItemRole.Product).FirstOrDefault() is { Part: var product and not null })
        {
            return await UOW.Load(db => db.Recipes
                .Where(r => r.Items.Any(i => i.Role == ItemRole.Product && i.Part != null && i.Part.Id == product.Id))
                .OrderBy(r => r.Id)
                .ToListAsync());
        }
        else
        {
            return [];
        }
    }

    private void PrevAlternate(Process process, List<Recipe> alternates)
    {
        if (process.Recipe is null || alternates.Count < 1)
        {
            return;
        }

        var earlier = alternates.TakeWhile(r => r.Id < process.Recipe.Id);
        if (earlier.Any())
        {
            process.Recipe = earlier.Last();
        }
        else
        {
            process.Recipe = alternates.Last();
        }
    }

    private void NextAlternate(Process process, List<Recipe> alternates)
    {
        if (process.Recipe is null || alternates.Count < 1)
        {
            return;
        }

        var later = alternates.SkipWhile(r => r.Id <= process.Recipe.Id);
        if (later.Any())
        {
            process.Recipe = later.First();
        }
        else
        {
            process.Recipe = alternates.First();
        }
    }
}

@if (recipes is not null)
{
    <FieldColumn>
        <Grid Items="@(new object[1])" Labels="@(["Name", "Category", "Notes"])">
            <TextField id="@context" @bind-Value="Model.Name" />
            <TextField id="@context" @bind-Value="Model.Category" />
            <TextField id="@context" @bind-Value="Model.Notes" />
        </Grid>

        <Grid T="Process" Items="Model.Processes" Labels="@(["Process", "Machines", "Shards", ""])" OnAdd="AddProcess" OnRemove="RemoveProcess">
            <ComboField T="Recipe" @bind-Value="context.Recipe" Context="selection" Options="recipes">
                <ImageBox Value="selection!.GetProductQuantities().First().Icon" SideLength="32" />
                <span>@selection.Name</span>
            </ComboField>
            <IntField @bind-Value="context.QuantityMachines" />
            <IntField @bind-Value="context.PowerShards" />
            <Async Binding="() => LoadAlternates(context.Recipe)" Context="alternates">
                <div class="auto shortcuts">
                    @if (alternates.Count > 1)
                    {
                        <CommandButton Small Action="() => PrevAlternate(context, alternates)">&lt;</CommandButton>
                        <CommandButton Small Action="() => NextAlternate(context, alternates)">&gt;</CommandButton>
                    }
                </div>
            </Async>
        </Grid>

        <Grid T="Input" Items="Model.Inputs" Labels="@(["Input", "Quantity (per minute)", "Source"])" OnAdd="AddInput" OnRemove="RemoveInput">
            <ComboField T="Part" @bind-Value="context.Part" Context="selection"
                Options="@(context.From?.CalculateLocalParts() ?? [])">
                <ImageBox Value="selection!.Icon" SideLength="32" />
                <span>@selection.Name</span>
            </ComboField>
            <FloatField @bind-Value="context.QuantityPerMinute" />
            <ComboField T="Facility" @bind-Value="context.From" Context="selection" Options="facilities">
                <span>@selection.Name</span>
            </ComboField>
        </Grid>

        @{
            var missingInputs = Model.CalculateMissingInputs().ToList();
            if (missingInputs.Any())
            {
                <Grid T="Input" Items="missingInputs" Labels="@(["Missing", "Required (per minute)"])" Derived>
                    <ReadonlyBox>
                        <ImageBox Value="context.Part?.Icon" SideLength="32" />
                        <span>@context.Part?.Name</span>
                    </ReadonlyBox>
                    <ReadonlyBox>@context.QuantityPerMinute</ReadonlyBox>
                </Grid>
            }
        }

        <Grid T="Input" Items="Model.Outputs" Labels="@(["Output", "Quantity (per minute)", "Destination"])" OnAdd="AddOutput" OnRemove="RemoveOutput">
            <ComboField T="Part" @bind-Value="context.Part" Context="selection" Options="Model.CalculateLocalParts()">
                <ImageBox Value="selection!.Icon" SideLength="32" />
                <span>@selection.Name</span>
            </ComboField>
            <FloatField @bind-Value="context.QuantityPerMinute" />
            <ComboField T="Facility" @bind-Value="context.To" Context="selection" Options="facilities">
                <span>@selection.Name</span>
            </ComboField>
        </Grid>

        @{
            var excessOutputs = Model.CalculateExcessOutputs().ToList();
            if (excessOutputs.Any())
            {
                <Grid T="Input" Items="Model.CalculateExcessOutputs()" Labels="@(["Excess", "Available (per minute)"])"
                    Derived>
                    <ReadonlyBox>
                        <ImageBox Value="context.Part?.Icon" SideLength="32" />
                        <span>@context.Part?.Name</span>
                    </ReadonlyBox>
                    <ReadonlyBox>@context.QuantityPerMinute</ReadonlyBox>
                </Grid>
            }
        }

        @{
            var machines = Model.CalculateMachines();
            <Grid T="object" Items="[null]" Labels="@([..machines.Keys, "Power Usage"])">
                @foreach (var v in machines.Values)
                {                    
                    <ReadonlyBox>@v</ReadonlyBox>
                }
                <ReadonlyBox>@Model.CalculatePowerText()</ReadonlyBox>
            </Grid>
        }

        <DangerousCommandBar Action="DeleteFacility">Delete</DangerousCommandBar>
    </FieldColumn>
}