@typeparam T
@code {
    [Parameter] public RenderFragment<T>? ChildContent { get; set; }
    [Parameter] public IReadOnlyList<string> Labels { get; set; } = [];
    [Parameter] public IEnumerable<T> Items { get; set; } = [];
    [Parameter] public bool Derived { get; set; }
    [Parameter] public EventCallback OnAdd { get; set; }
    [Parameter] public EventCallback<T> OnRemove { get; set; }
}

<div class="@BEM.Class("grid", (Derived, "derived"))" style="--columns: @(Labels.Count)">
    @foreach (var label in Labels)
    {
        <div class="grid-header" onclick="document.getElementById()">@label</div>
    }
    <div class="grid-header grid-commands">
        @if (OnAdd.HasDelegate)
        {
            <CommandButton Small Action="OnAdd">+</CommandButton>
        }
    </div>

    @foreach (var item in Items)
    {
        @ChildContent?.Invoke(item)
        <div class="grid-commands">
            @if (OnRemove.HasDelegate)
            {
                <CommandButton Small Action="() => OnRemove.InvokeAsync(item)">-</CommandButton>
            }
        </div>
    }
</div>