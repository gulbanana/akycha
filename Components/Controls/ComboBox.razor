@typeparam T
@inject IJSRuntime JS
@code {
    [Parameter] public RenderFragment<T>? ChildContent { get; set; }
    [Parameter] public T? Selection { get; set; }
    [Parameter] public EventCallback<T?> SelectionChanged { get; set; }
    [Parameter] public IEnumerable<T> Options { get; set; } = [];
    [Parameter(CaptureUnmatchedValues = true)] public IDictionary<string, object>? Splat { get; set; }

    private IJSObjectReference module = default!;
    private ElementReference? box;
    private ElementReference? popup;
    private bool isOpen;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./Components/Controls/ComboBox.razor.js");
            await module.InvokeVoidAsync("bind", box, popup);
        }
    }

    private void OpenPopup()
    {
        isOpen = !isOpen;
    }

    private void ClosePopup()
    {
        isOpen = false;
    }

    private async Task SelectOption(T option)
    {
        Selection = option;
        await SelectionChanged.InvokeAsync(option);
    }
}

<button class="@BEM.Class("box", (isOpen, "active"))" 
        @ref="box" 
        @attributes="Splat"
        @onclick="OpenPopup"
        @onfocusout="ClosePopup">
    @if (Selection is not null)
    {
        @ChildContent?.Invoke(Selection)
    }
    <div class="spacer"></div>
    <span>â–¼</span>

    <div @ref="popup" class="@BEM.Class("popup", (isOpen, "open"))">
        @foreach (var option in Options)
        {
            <button class="option" @onmousedown="() => SelectOption(option)">
                @ChildContent?.Invoke(option)
            </button>
        }
    </div>
</button>