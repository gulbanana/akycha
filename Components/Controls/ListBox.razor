@typeparam T where T : class
@code {
    [Parameter] public RenderFragment<T>? ChildContent { get; set; }
    [Parameter, EditorRequired] public required Func<Task<IReadOnlyList<T>>> GetModels { get; set; }
    [Parameter, EditorRequired] public required Func<T, string> GetHeader { get; set; }
    [Parameter] public EventCallback AddCommand { get; set; }
    [Parameter] public T? Selection { get; set; }
    [Parameter] public EventCallback<T> SelectionChanged { get; set; }
    private bool loaded;
    private IReadOnlyList<T> models = [];

    protected override async Task OnParametersSetAsync()
    {
        models = await GetModels();
        loaded = true;
    }

    private void Select(T model)
    {
        Selection = model;
        SelectionChanged.InvokeAsync(model);
    }
}

<div class="list">
    @{
        var currentHeader = "";
        var firstHeader = true;
        foreach (var model in models)
        {
            var itemHeader = GetHeader(model);
            if (currentHeader != itemHeader)
            {                
                <header>
                    <span class="title">@itemHeader</span>
                    @if (firstHeader && AddCommand.HasDelegate)
                    {                        
                        <CommandButton @onclick="AddCommand" disabled="@(!loaded)">Add</CommandButton>
                        firstHeader = false;
                    }
                </header>
                currentHeader = itemHeader;
            }

            <button class="@BEM.Class("item", (model == Selection, "selected"))" @onclick="() => Select(model)">
                @ChildContent?.Invoke(model)
            </button>
        }
    }
</div>
