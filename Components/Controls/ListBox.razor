@typeparam T where T : class
@code {
    [Parameter] public RenderFragment<T>? ChildContent { get; set; }
    [Parameter, EditorRequired] public required Func<Task<IReadOnlyList<T>>> GetModels { get; set; }
    [Parameter, EditorRequired] public required Func<T, string> GetHeader { get; set; }
    [Parameter] public EventCallback AddCommand { get; set; }
    [Parameter] public T? Selection { get; set; }
    [Parameter] public EventCallback<T> SelectionChanged { get; set; }

    private readonly Dictionary<string, bool> expanded = new();
    private bool loaded;
    private IReadOnlyList<T> models = [];

    protected override async Task OnParametersSetAsync()
    {
        models = await GetModels();
        loaded = true;
    }

    private void Select(T model)
    {
        Selection = model;
        SelectionChanged.InvokeAsync(model);
    }
}

<div class="list">
    @{
        var currentHeader = "";
        var firstHeader = true;
        foreach (var model in models)
        {
            var itemHeader = GetHeader(model);
            if (currentHeader != itemHeader)
            {
                if (!expanded.ContainsKey(itemHeader))
                {
                    expanded[itemHeader] = true;
                }
                <header>
                    <button class="title" @onclick="() => expanded[itemHeader] = !expanded[itemHeader]">
                        <svg class="expander" viewBox="0 0 14 14">
                            @if (expanded[itemHeader])
                            {
                                <path d="M0,5 L7,12 L14,5" />
                            }
                            else
                            {
                                <path d="M5,0 L12,7 L5,14" />
                            }
                        </svg>
                        <span>@itemHeader</span>
                    </button>
                    @if (firstHeader && AddCommand.HasDelegate)
                    {                        
                        <CommandButton Action="AddCommand" Disabled="@(!loaded)">Add</CommandButton>
                        firstHeader = false;
                    }
                </header>
                currentHeader = itemHeader;
            }

            @if (expanded[currentHeader])
            {
                <button class="@BEM.Class("item", (model == Selection, "selected"))" @onclick="() => Select(model)">
                    @ChildContent?.Invoke(model)
                </button>
            }
        }
    }
</div>
