@page "/Statistics"
@using Microsoft.EntityFrameworkCore

@code {
    [Inject] public required IDbContextFactory<FactoryContext> Factory { get; set; }
    [Inject] public required SettingsService Settings { get; set; }
    private readonly List<(string name, double total)> gains = [];
    private readonly List<(string name, double total)> costs = [];
    private List<Facility> facilities = [];
    private double gross;
    private double net => gross - (GetBoost() ?? 0);

    protected override void OnInitialized()
    {
        using var context = Factory.CreateDbContext();

        facilities = context.Facilities
            .Include(f => f.Processes)
            .ThenInclude(p => p.Recipe)
            .ThenInclude(r => r!.Machine)
            .ToList();

        foreach (var group in facilities.Where(f => f.CalculatePowerUsage() < 0).GroupBy(f => f.Category))
        {
            gains.Add((group.Key, group.Sum(f => f.CalculatePowerUsage())));
        }

        foreach (var group in facilities.Where(f => f.CalculatePowerUsage() >= 0).GroupBy(f => f.Category))
        {
            costs.Add((group.Key, group.Sum(f => f.CalculatePowerUsage())));
        }

        gross = facilities.Sum(f => f.CalculatePowerUsage());
    }

    private string augmenters
    {
        get => Settings.Get("Augmenters", 0).ToString();
        set
        {
            if (int.TryParse(value, out var parsed))
            {
                Settings.Put("Augmenters", parsed);
            }
        }
    }

    private double? GetBoost()
    {
        if (int.TryParse(augmenters, out var x) && x > 0)
        {
            var totalGains = facilities
            .SelectMany(f => f.Processes)
            .Select(p => p.CalculatePowerUsage())
            .Where(u => u < 0)
            .Sum();

            return totalGains * x * -0.1;
        }
        else
        {
            return null;
        }
    }
}

<p>
    @foreach (var gain in gains.OrderBy(c => c.name))
    {
        <span>@gain.name</span>
        <span class="filler"></span>
        <span class="good usage">@Format.Power(gain.total * -1)</span>
    }

    @if (gains.Count > 0)
    {
        <span></span>
        <span class="filler"></span>
        <hr>
        <span></span>
        <span class="filler"></span>
        <span class="total usage">+@Format.Power(gains.Sum(c => c.total) * -1)</span>
    }
</p>

<p>
    @foreach (var cost in costs.OrderBy(c => c.name))
    {
        <span>@cost.name</span>
        <span class="filler"></span>
        <span class="bad usage">@Format.Power(cost.total)</span>
    }

    @if (costs.Count > 1)
    {
        <span></span>
        <span class="filler"></span>
        <hr>
        <span></span>
        <span class="filler"></span>
        <span class="total usage">-@Format.Power(costs.Sum(c => c.total))</span>
    }
</p>

<p class="augmenters">
    <span>Alien Power Augmenters</span>
    <span class="filler"></span>
    <TextBox @bind-Value="augmenters" />

    @if (GetBoost() is double augmented)
    {
        <span></span>
        <span class="filler"></span>
        <hr>
        <span></span>
        <span class="filler"></span>
        <span class="total usage">+@Format.Power(augmented)</span>
    }
</p>

<p class="total">
    <span>Net</span>
    <span class="filler"></span>
    @if (net < 0)
    {
        <span class="usage">+@Format.Power(net * -1)</span>
    }
    else
    {
        <span class="usage">-@Format.Power(net)</span>
    }
</p>
