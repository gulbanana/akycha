@using Microsoft.EntityFrameworkCore

@typeparam T where T : class, IOrdered<T>, new()
@implements IDisposable
@inject NavigationManager Nav
@code {
    [CascadingParameter] public required IUnitOfWork UOW { get; set; }
    [Parameter] public RenderFragment<T>? Master { get; set; }
    [Parameter] public RenderFragment<T>? Detail { get; set; }
    [Parameter, EditorRequired] public required string Prefix { get; set; }
    [Parameter] public Func<IQueryable<T>, IQueryable<T>> Filter { get; set; } = xs => xs;
    [Parameter] public int? Id { get; set; }
    [Parameter] public EventCallback<int?> IdChanged { get; set; }

    private T? selection;

    protected override void OnInitialized()
    {
        UOW.OnChanged += UOWChanged;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!Nullable.Equals(Id, selection?.Id) && Id != 0)
        {
            selection = await UOW.Load(async db => await db.Set<T>().FindAsync(Id));
        }        
    }

    public void Dispose()
    {
        UOW.OnChanged -= UOWChanged;
    }

    private T? Selection
    {
        get
        {
            if (selection is null || UOW.GetLoaded<T>().Contains(selection))
            {
                return selection;
            }
            else
            {
                return null;
            }
        }
        set
        {
            selection = value;
            if (selection is null)
            {
                Nav.NavigateTo($"/{Prefix}");
            }   
            else if (selection.Id != 0)
            {
                Nav.NavigateTo($"/{Prefix}/{selection.Id}");
            }
        }
    }
    private void UOWChanged()
    {
        if (Selection is null)
        {
            Nav.NavigateTo($"/{Prefix}");
        }
        else if (Selection.Id != 0)
        {
            Nav.NavigateTo($"/{Prefix}/{Selection.Id}");
        }
    }

    private Task<IReadOnlyList<T>> GetItems() => UOW.Load<IReadOnlyList<T>>(async db =>
    {
        await Filter(db.Set<T>()).LoadAsync();
        return db.Set<T>().Local.OrderBy(T.GetKey).ToList();
    });

    private async Task AddItem()
    {
        var entity = new T();
        UOW.GetLoaded<T>().Add(entity);
        await IdChanged.InvokeAsync(entity?.Id);
        Selection = entity;
        UOW.NotifyChanged();
    }
}

<div class="@BEM.Class("master-detail", (Selection is not null, "has-detail"))">
    <ListBox T=T Header="@($"{Prefix}")" GetModels="GetItems" AddCommand="AddItem" @bind-Selection="Selection">
        @Master?.Invoke(context)
    </ListBox>
    @if (Selection is not null)
    {
        @Detail?.Invoke(Selection)
    }
</div>
